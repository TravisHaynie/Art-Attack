the config folder and in there is the connection.js file and here is the code const Sequelize = require('sequelize');
require('dotenv').config();

const sequelize = process.env.DB_URL
  ? new Sequelize(process.env.DB_URL)
  : new Sequelize(
    process.env.DB_NAME,
    process.env.DB_USER,
    process.env.DB_PASSWORD,
    {
      host: 'localhost',
      dialect: 'postgres',
    }
  );

module.exports = sequelize;
 and outside that is the controllers folder and then in there is the homeRoutes.js and here is the code const router = require('express').Router();
const { User, Subject, GameSession } = require('../models'); 

// Render homepage
router.get('/', (req, res) => {
    res.render('home_menu', {
      loggedIn: req.session.loggedIn,
      siteTitle: 'ART ATTACK'
    });
  });
  
// Render login page
router.get('/login', (req, res) => {
  res.render('login', {
    loggedIn: req.session.loggedIn 
  });
});

router.get('/canvas', (req, res) => {
    res.render('canvas', {
      loggedIn: req.session.loggedIn,
      siteTitle: 'Canvas Drawing'
    });
  });
  
  router.get('/votescreen', (req, res) => {
    res.render('votescreen', {
        loggedIn: req.session.loggedIn,
        siteTitle: 'Vote Screen'
    });
});

router.get('/lobby', (req, res) => {
  res.render('lobby', {
      loggedIn: req.session.loggedIn,
      siteTitle: 'lobby'
  });
});

router.post('/game-session', async (req, res) => {

  // Find the total count of subjects in the database
  const totalSubjects = await Subject.count();
  console.log(await Subject.findAll());

  // Generate a random number between 1 and the total number of subjects
  const randomSubjectId = Math.floor(Math.random() * totalSubjects) + 1;
  // console.log(randomSubjectId);
  // Find a subject based on the random subject ID
  const subject = await Subject.findByPk(randomSubjectId);
  // console.log(subject.id);

  try {
    const newGameSession = await GameSession.create({
      player1: req.body.userId,
      player2: null,
      subject: randomSubjectId,
      inProgress: false, // Set initially to false
      votingEnabled: false,
      hasVoted: null,
    });

    console.log(newGameSession);

    // Update the inProgress value to true just before redirecting
    newGameSession.inProgress = true;
    await newGameSession.save();

    // const gameSessionData = await GameSession.findByPk(newGameSession.id);
    // const gameSession = gameSessionData.get({ plain: true });
    // console.log(gameSession);
    res.redirect(/lobby?sessionId=${newGameSession.id});
  } catch (error) {
    console.error(error);
    //res.status(500).json({ error: 'Internal server error' });
  }
});

router.get('/game-session', async (req, res) => {
  try {
    // Data to be sent in the POST request
    const postData = {
      player1: req.session.user,
    };
  
    req.body = postData; 
    req.method = 'POST'; 
    req.url = '/game-session'; 
    
    const response = {
      data: null,
      redirect: function (path) {
        res.redirect(path); // Redirect the user based on the response data
      },
      status: function (statusCode) {
        res.status(statusCode).json({ error: 'Internal server error' }); // Handle status codes
      }
    };

    // Call the route handler for the POST request
    await router.handle(req, response);

  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error A' });
  }
});

router.get('/game-session/:id', async (req, res) => {
  const gameSessionId = req.params.id;

  // Fetch the game session data based on the provided ID
  try {
    const gameSession = await GameSession.findByPk(gameSessionId);

    if (!gameSession) {
      return res.status(404).json({ error: 'Game session not found' });
    }

    // Render the game session details or return the data in JSON format
    res.json(gameSession);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

  // create game session

  //take game session id and redirect to game-session/:id



// game-session:id

//game-session:id:player1

//game-session:id:player2



module.exports = router;
and then the index.js and here is the code const router = require('express').Router();
const homeRoutes = require('./homeRoutes');
const userRoutes = require('./userRoutes');
const gameSessionApi = require('./api/gameSessionRoutes')

// Use routes
router.use('/', homeRoutes);
router.use('/user', userRoutes);

// router.use('api/game-session', gameSessionApi);

module.exports = router;
 and then the userRoutes.js and here is the code const router = require('express').Router();
const { User } = require('../models'); // Import your models
const bcrypt = require('bcrypt'); // For password hashing

// Login
router.post('/login', async (req, res) => {
  try {
    const dbUserData = await User.findOne({ where: { username: req.body.username } });

    if (!dbUserData) {
      return res.status(400).json({ message: 'Incorrect username or password. Please try again!' });
    }

    const validPassword = await dbUserData.checkPassword(req.body.password);

    if (!validPassword) {
      return res.status(400).json({ message: 'Incorrect username or password. Please try again!' });
    }

    req.session.save(() => {
      req.session.loggedIn = true;
      req.session.userId = dbUserData.id; // Save only the user ID in the session

      res.status(200).json({
        user: {
          id: dbUserData.id,
          username: dbUserData.username,
          totalVotes: dbUserData.totalVotes,
          totalVictories: dbUserData.totalVictories
        },
        message: 'You are now logged in!'
      });
    });
  } catch (err) {
    console.error('Login error:', err);
    res.status(500).json({ message: 'An error occurred during login.' });
  }
});

router.post('/user', async (req, res) => {
  try {
    const { username, email, password } = req.body;

    // Create a new user
    const dbUserData = await User.create({
      username,
      email,
      password,
    });

    req.session.save(() => {
      req.session.loggedIn = true;
      req.session.userId = dbUserData.id;

      res.status(200).json({ userId: dbUserData.id });
      console.log('New User Created:', dbUserData);

    });
  } catch (err) {
    console.error('Signup error:', err);
    res.status(500).json({ message: 'An error occurred during signup.' });
  }
});

router.post('/logout', (req, res) => {
  req.session.destroy(() => {
    res.status(204).end(); // No content to send back
  });
});

router.get('/:username', (req, res) => {
  const username = req.params.username; // Get the username from the URL parameter

  User.findOne({ where: { username } })
    .then((userData) => {
      if (!userData) {
        return res.status(404).send('User not found');
      }
      
      res.render('user-profile', {
        username: userData.username,
        votes: userData.totalVotes,
        victories: userData.totalVictories,
      });
    })
    .catch((err) => {
      console.error('Error fetching user data:', err);
      res.status(500).send('An error occurred while fetching user data');
    });
});

module.exports = router;
then the db folder out of this and in there is the schema.sql and in there is this code DROP DATABASE IF EXISTS art_attack_db;
CREATE DATABASE art_attack_db;

-- CREATE TABLE User;

-- CREATE TABLE Subject;

-- CREATE TABLE Session;

-- CREATE TABLE Image; then the models folder and in there is the gamesession.js and here is the code const { Model, DataTypes } = require('sequelize');
const sequelize = require('../config/connection');
//
class GameSession extends Model {}

GameSession.init(
    {
        id: {
            type: DataTypes.INTEGER,
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        player1: {
            type: DataTypes.INTEGER,       // References user.id
            allowNull: true,
            references: {
                model: 'user',
                key: 'id',
            },
        },
        player2: {
            type: DataTypes.INTEGER,       // References user.id
            allowNull: true,
            references: {
                model: 'user',
                key: 'id',
            },
        },
        subject: {
            type: DataTypes.INTEGER,
            allowNull: false,
            references: {
                model: 'subject',
                key: 'id',
            }
        },
        inProgress: {       // Determines if a game is in progress. if so, players can draw images. On false, save images to db.
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false,
        },
        votingEnabled: {    // Redirects players to voting page and generates a code/url to give voters. When time is up,
                            // no more votes are accepted, a winner is declared, and vote count and victory count are added to users.
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false,
        },
        hasVoted: {     // Keeps track of who has voted by user id. If a user's id is in this array, they have already voted.
            type: DataTypes.INTEGER,
            allowNull: true,
            references: {
                model: 'user',
                key: 'id',
            }
        },
    },
    {
        sequelize,
        freezeTableName: true,
        modelName: 'gameSession',
    }
);

module.exports = GameSession; then the image.js and in there is this code const { Model, DataTypes } = require('sequelize');
const sequelize = require('../config/connection');
//
class GameSession extends Model {}

GameSession.init(
    {
        id: {
            type: DataTypes.INTEGER,
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        player1: {
            type: DataTypes.INTEGER,       // References user.id
            allowNull: true,
            references: {
                model: 'user',
                key: 'id',
            },
        },
        player2: {
            type: DataTypes.INTEGER,       // References user.id
            allowNull: true,
            references: {
                model: 'user',
                key: 'id',
            },
        },
        subject: {
            type: DataTypes.INTEGER,
            allowNull: false,
            references: {
                model: 'subject',
                key: 'id',
            }
        },
        inProgress: {       // Determines if a game is in progress. if so, players can draw images. On false, save images to db.
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false,
        },
        votingEnabled: {    // Redirects players to voting page and generates a code/url to give voters. When time is up,
                            // no more votes are accepted, a winner is declared, and vote count and victory count are added to users.
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false,
        },
        hasVoted: {     // Keeps track of who has voted by user id. If a user's id is in this array, they have already voted.
            type: DataTypes.INTEGER,
            allowNull: true,
            references: {
                model: 'user',
                key: 'id',
            }
        },
    },
    {
        sequelize,
        freezeTableName: true,
        modelName: 'gameSession',
    }
);

module.exports = GameSession; and then the index.js and here is the code const User = require("./User");
const Subject = require("./Subject.js");
const GameSession = require("./GameSession.js");
const Image = require("./Image.js");

Subject.belongsTo(User, {
    foreignKey: 'submittedBy',
});

User.hasMany(Subject, {
    foreignKey: 'submittedBy',
});


GameSession.belongsTo(User, {
    foreignKey: 'player1',
});

GameSession.belongsTo(User, {
    foreignKey: 'player2',
});


// User.belongsTo(GameSession, {
//     foreignKey: 'id',
// });

GameSession.hasMany(Image, {
    foreignKey: 'sessionId', // Should match the field in Image model
    onDelete: 'CASCADE',
});

Image.belongsTo(GameSession, {
    foreignKey: 'sessionId', // Should match the field in Image model
});




module.exports = { User, Subject, GameSession, Image }; // All models listed in order of dependence
then the subject.js and here is the code const { Model, DataTypes } = require('sequelize');
const sequelize = require('../config/connection');

class Subject extends Model {}

Subject.init(
    {
        id: {
            type: DataTypes.INTEGER,
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        subject: {
            type: DataTypes.STRING,
            allowNull: false,
        },
        submittedBy: {
            type: DataTypes.INTEGER,
            allowNull: false,
            references: {
                model: 'user',
                key: 'id',
            }
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
            defaultValue: DataTypes.NOW, // Set default value to NOW()
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
            defaultValue: DataTypes.NOW, // Set default value to NOW()
        },
    },
    {
        sequelize,
        freezeTableName: true,
        modelName: 'subject',
    }
);

module.exports = Subject; then the user.js and here is the code const { Model, DataTypes } = require('sequelize');
const bcrypt = require('bcrypt');
const sequelize = require('../config/connection');

class User extends Model {
  checkPassword(loginPw) {
    return bcrypt.compareSync(loginPw, this.password);
  }
}

User.init(
  {
    id: {
      type: DataTypes.INTEGER,
      allowNull: false,
      primaryKey: true,
      autoIncrement: true,
    },
    username: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: true,
      unique: true,
      validate: {
        isEmail: true,
      },
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        len: [8],
      },
    },
    totalVotes: {
      type: DataTypes.INTEGER,
      allowNull: false,
      defaultValue: 0,
    },
    totalVictories: {
      type: DataTypes.INTEGER,
      allowNull: false,
      defaultValue: 0,
    },
  },
  {
    hooks: {
      beforeCreate: async (newUserData) => {
        newUserData.password = await bcrypt.hash(newUserData.password, 10);
        return newUserData;
      },
    },
    sequelize,
    timestamps: false,
    freezeTableName: true,
    modelName: 'user',
  }
);

module.exports = User; then the public folder with the css which we wont give right now then the js folder and in there is the canvas.js here is the code document.addEventListener('DOMContentLoaded', () => {
  if (typeof fabric === 'undefined') {
      console.error('Fabric.js is not loaded. Check the script source.');
      return;
  }

  var canvas = new fabric.Canvas('c', {
      isDrawingMode: true
  });

  fabric.Object.prototype.transparentCorners = false;

  var drawingModeEl = document.getElementById('drawing-mode');
  var drawingOptionsEl = document.getElementById('drawing-mode-options');
  var drawingColorEl = document.getElementById('drawing-color');
  var drawingShadowColorEl = document.getElementById('drawing-shadow-color');
  var clearEl = document.getElementById('clear-canvas');
  var saveEl = document.getElementById('save-canvas');

  if (!drawingModeEl || !drawingOptionsEl || !drawingColorEl || !drawingShadowColorEl || !clearEl || !saveEl) {
      console.error('One or more required elements are missing from the HTML.');
      return;
  }

  // Clear canvas
  clearEl.onclick = () => { canvas.clear(); };

  // Toggle drawing mode
  drawingModeEl.onclick = () => {
      canvas.isDrawingMode = !canvas.isDrawingMode;
      if (canvas.isDrawingMode) {
          drawingModeEl.textContent = 'Cancel drawing mode';
          drawingOptionsEl.style.display = '';
      } else {
          drawingModeEl.textContent = 'Enter drawing mode';
          drawingOptionsEl.style.display = 'none';
      }
  };

  // Set default brush (e.g., PencilBrush)
  canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);

  // Update brush color
  drawingColorEl.addEventListener('change', function() {
      var brush = canvas.freeDrawingBrush;
      if (brush) {
          brush.color = this.value;
      }
  });

  // Update brush shadow color
  drawingShadowColorEl.addEventListener('change', function() {
      var brush = canvas.freeDrawingBrush;
      if (brush) {
          brush.shadow.color = this.value;
      }
  });

  // Initialize brush settings
  if (canvas.freeDrawingBrush) {
      canvas.freeDrawingBrush.color = drawingColorEl.value;
  }

  // Save canvas content to local storage
  saveEl.addEventListener('click', function() {
      var dataURL = canvas.toDataURL({
          format: 'png'
      });
      localStorage.setItem('canvasDrawing', dataURL);
      alert('Drawing saved!');
  });
  setTimeout(() => {
    window.location.href = '/votescreen'; // Replace '/redirect-page' with the URL of the page you want to redirect to
}, 6000); // 1 minute
});
then the lobbys.js and here is the code document.addEventListener('DOMContentLoaded', () => {
    const sessionId = new URLSearchParams(window.location.search).get('sessionId');
    const userIdString = sessionStorage.getItem('userId');// Retrieve user info from sessionStorage

    console.log('Raw userIdString from sessionStorage:', userIdString);

    let userId = null;
    try {
        if (userIdString) {
            userId = JSON.parse(userIdString);
        }
    } catch (e) {
        console.error('Error parsing user data:', e);
    }

    console.log('Session ID:', sessionId);
    console.log('User:', userId);

    if (!sessionId || !userId) {
        alert('Invalid session or user not logged in.');
        window.location.href = '/';
        return;
    }

    const statusElement = document.getElementById('status');
    const gameSessionElement = document.getElementById('gameSession');
    gameSessionElement.textContent = Session ID: ${sessionId};

    // Function to periodically check if both players are in the session
    async function checkSessionStatus() {
        try {
            // Retrieve sessionId and userId from storage
            const sessionId = new URLSearchParams(window.location.search).get('sessionId');
            const userIdString = sessionStorage.getItem('userId');
            let userId = null;
            try {
                if (userIdString) {
                    userId = JSON.parse(userIdString);
                }
            } catch (e) {
                console.error('Error parsing user data:', e);
            }
    
            if (!sessionId || !userId) {
                throw new Error('Session ID or User ID is missing.');
            }
    
            // Log for debugging
            console.log('Session ID:', sessionId);
            console.log('User ID:', userId);
    
            // Check if the session is active or if both players are present
            const response = await fetch(/api/session-status?sessionId=${sessionId});
            if (!response.ok) {
                throw new Error('Failed to fetch session status.');
            }
            const data = await response.json();
    
            if (data.players.length === 2) {
                // Redirect to the canvas if both players are present
                window.location.href = /canvas?sessionId=${sessionId};
            } else {
                // Update status element if waiting for another player
                statusElement.textContent = Waiting for another player... (${data.players.length}/2);
            }
        } catch (error) {
            // Log the error and alert the user
            console.error('Error checking session status:', error);
            alert('An error occurred while checking the session status.');
        }
    }
    

    // Initial check
    checkSessionStatus();
    setInterval(checkSessionStatus, 2000); // Check every 2 seconds
}); then the modals.js and here is the code document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('loginModal');
    const openModalButton = document.getElementById('log_in_button');
    const closeModalButtons = modal.querySelectorAll('.modal-close');
    const modalBackground = modal.querySelector('.modal-background');
    const playButton = document.getElementById('play_button');
    const logoutButton = document.getElementById('logoutButton');

    // Open modal when login button is clicked
    openModalButton.addEventListener('click', () => {
        modal.classList.add('is-active');
    });

    // Close modal when the close button or background is clicked
    closeModalButtons.forEach(button => {
        button.addEventListener('click', () => {
            modal.classList.remove('is-active');
        });
    });

    modalBackground.addEventListener('click', () => {
        modal.classList.remove('is-active');
    });

    // Handle login form submission
    document.getElementById('loginForm').addEventListener('submit', async (event) => {
        event.preventDefault();
        
        const username = document.getElementById('username-login').value.trim();
        const password = document.getElementById('password-login').value.trim();

        if (username && password) {
            try {
                const response = await fetch('/user/login', {
                    method: 'POST',
                    body: JSON.stringify({ username, password }),
                    headers: { 'Content-Type': 'application/json' },
                });

                if (response.ok) {
                    const data = await response.json();
                    sessionStorage.setItem('userId', JSON.stringify(data.userId));
                    console.log('User ID stored:', data.userId);
                    console.log('Stored in sessionStorage:', sessionStorage.getItem('userId'));
                    updatePlayButtonState(); // Update button state after login
                    modal.classList.remove('is-active');
                } else {
                    alert('Failed to log in.');
                }
            } catch (err) {
                console.error('Login error:', err);
                alert('An error occurred during login.');
            }
        }
    });

    // Handle signup form submission
    document.getElementById('signupForm').addEventListener('submit', async (event) => {
        event.preventDefault();
        
        const username = document.getElementById('username-signup').value.trim();
        const email = document.getElementById('email-signup').value.trim();
        const password = document.getElementById('password-signup').value.trim();

        if (username && email && password) {
            try {
                const response = await fetch('/user', {
                    method: 'POST',
                    body: JSON.stringify({ username, email, password }),
                    headers: { 'Content-Type': 'application/json' },
                });

                if (response.ok) {
                    const data = await response.json();
                    sessionStorage.setItem('userId', JSON.stringify(data.userId));
                    console.log('User ID stored:', data.userId);
                    console.log('Stored in sessionStorage:', sessionStorage.getItem('userId'));
                    updatePlayButtonState(); // Update button state after signup
                    modal.classList.remove('is-active');
                } else {
                    alert('Failed to sign up.');
                }
            } catch (err) {
                console.error('Signup error:', err);
                alert('An error occurred during signup.');
            }
        }
    });

    // Toggle between login and signup forms
    document.getElementById('showSignupForm').addEventListener('click', (event) => {
        event.preventDefault();
        document.getElementById('loginFormContainer').style.display = 'none';
        document.getElementById('signupFormContainer').style.display = 'block';
    });

    document.getElementById('showLoginForm').addEventListener('click', (event) => {
        event.preventDefault();
        document.getElementById('loginFormContainer').style.display = 'block';
        document.getElementById('signupFormContainer').style.display = 'none';
    });

    // Function to update the state of the "To Battle!" button based on user login status
    function updatePlayButtonState() {
        const user = sessionStorage.getItem('userId');
        if (user) {
            playButton.disabled = false;
        } else {
            playButton.disabled = true;
        }
    }

    // Initial check to set the button state on page load
    updatePlayButtonState();

    // Handle "To Battle!" button click
    playButton.addEventListener('click', () => {
        const user = sessionStorage.getItem('userId');
        if (user) {
            // Redirect to the game-session page
            window.location.href = '/game-session';
        } else {
            alert('You must be logged in to access the battle.');
        }
    });
    logoutButton.addEventListener('click', async () => {
        try {
            const response = await fetch('/logout', {
                method: 'POST'
            });

            if (response.ok) {
                sessionStorage.clear();
                updatePlayButtonState(); // Update button state after logout
                window.location.href = '/'; // Redirect to home or login page
            } else {
                alert('Failed to log out.');
            }
        } catch (err) {
            console.error('Logout error:', err);
            alert('An error occurred during logout.');
        }
    });
    

});
then the seeds folder and here is the index.js and here is the code const sequelize = require('../config/connection'); // Import your Sequelize instance
const seedSubjects = require('./seeds');

const seed = async () => {
    try {
        await sequelize.sync(); // Ensure database connection
        await seedSubjects(); // Seed subjects data
        console.log('Seed process completed successfully.');
        process.exit(0); // Exit the script after seeding
    } catch (error) {
        console.error('Error seeding data:', error);
        process.exit(1); // Exit the script with an error status
    }
};

seed(); then the seeds.js and here is the code const sequelize = require('sequelize'); 
const { Subject } = require('../models');

const subjectData = [
    {
        subject: 'Mathematics',
        submittedBy: 1, 
    },
    {
        subject: 'Science',
        submittedBy: 2, 
    },
    {
        subject: 'History',
        submittedBy: 3, 
    },
];


seedSubjects = await Subject.bulkCreate(subjectData);



module.exports = seedSubjects; then the views folder in here is the layouts folder and oartials and then roots we will start with the layouts an din ther eis the main.handlebars and here is the code <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Art Attack</title>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
  <link rel="stylesheet" href="./css/home_menu.css">
</head>
<body>
  <main>
    <aside>
      <h2>Enjoy the pictures!</h2>
    </aside>
    <div>
      {{{body}}}
    </div>
  </main>
  {{#if loggedIn}}
  <script src="/js/loginlogout.js"></script>
  {{/if}}
</body>
</html>

 then in the root is the canvas.handlebars and here is the code <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Canvas Drawing</title>
    <link rel="stylesheet" href="/css/canvas.css"> <!-- Ensure this file exists -->
</head>
<body>
    <main>
        <div class="canvas-container">
            <div class="canvas-controls">
                <button id="drawing-mode">Enter drawing mode</button>
                <div id="drawing-mode-options" style="display: none;">
                    <label for="drawing-color">Color:</label>
                    <input type="color" id="drawing-color" value="#000000">
                    <label for="drawing-shadow-color">Shadow color:</label>
                    <input type="color" id="drawing-shadow-color" value="#000000">
                </div>
                <button id="clear-canvas">Clear Canvas</button>
                <button id="save-canvas">Save Canvas</button>
            </div>
            <canvas id="c" width="500" height="500"></canvas>
        </div>
    </main>
  <script src="https://cdn.jsdelivr.net/npm/fabric@6.3.0/dist/index.min.js"></script>
    <script src="/js/canvas.js"></script> <!-- Ensure this file exists -->
</body>
</html>
then the home_menu.handlebars and here is the code <body>
  <main>
    <div id="top_div">
        <img src="" alt="Little guy image here"> <!-- Add your image source here -->
        <h1 id="title">ART ATTACK!</h1>
    </div>

    <div id="bottom_div">
        <button id="play_button">To Battle!</button>
        <button id="gallery_button">To Gallery!</button>
        <button id="log_in_button">Log in</button>
        <button id="join_game_button">Join Game Session</button>
        <img id="frame" src="images/frame6.png" alt="Frame image">
    </div>
    <div id="sessionsContainer">
    <!-- Session buttons will be appended here -->
  </div>
    
  </main>

  <!-- Modal HTML -->
  <div id="loginModal" class="modal">
    <div class="modal-background"></div>
    <div class="modal-content">
      <div class="box">
        <h2 class="title">Login / Signup</h2>
        <div id="loginFormContainer">
          <form id="loginForm">
            <div class="field">
              <label class="label" for="username-login">Username</label>
              <div class="control">
                <input class="input" type="text" id="username-login" placeholder="Enter your username">
              </div>
            </div>
            <div class="field">
              <label class="label" for="password-login">Password</label>
              <div class="control">
                <input class="input" type="password" id="password-login" placeholder="Enter your password">
              </div>
            </div>
            <div class="field">
              <div class="control">
                <button class="button is-primary" type="submit">Login</button>
              </div>
            </div>
            <div class="field">
              <p class="control">
                <a href="#" id="showSignupForm">Need an account? Sign up</a>
              </p>
            </div>
          </form>
        </div>
        <div id="signupFormContainer" style="display:none;">
          <form id="signupForm">
            <div class="field">
              <label class="label" for="username-signup">Username</label>
              <div class="control">
                <input class="input" type="text" id="username-signup" placeholder="Enter your username">
              </div>
            </div>
            <div class="field">
              <label class="label" for="email-signup">Email</label>
              <div class="control">
                <input class="input" type="email" id="email-signup" placeholder="Enter your email">
              </div>
            </div>
            <div class="field">
              <label class="label" for="password-signup">Password</label>
              <div class="control">
                <input class="input" type="password" id="password-signup" placeholder="Enter your password">
              </div>
            </div>
            <div class="field">
              <div class="control">
                <button class="button is-primary" type="submit">Sign Up</button>
              </div>
            </div>
            <div class="field">
              <p class="control">
                <a href="#" id="showLoginForm">Already have an account? Log in</a>
              </p>
            </div>
          </form>
        </div>
        <!-- Logout Button -->
        <div class="field">
          <div class="control">
            <button id="logoutButton" class="button is-danger">Logout</button>
          </div>
        </div>
      </div>
    </div>
    <button class="modal-close is-large" aria-label="close"></button>
  </div>
  
  <script src="/js/modal.js"></script> <!-- Include your modal JavaScript file -->
</body>
</html>
then the lobbys handlebar and here is the code <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
</head>
<body>
    <h1>Lobby</h1>
    <p id="gameSession"></p>
    <p id="status">Loading...</p>
    <script src="/js/lobby.js"></script>
</body>
</html> then the server.js in the root of it all and here is the code const path = require('path');
const express = require('express');
const exphbs = require('express-handlebars');
const session = require('express-session');
const routes = require('./controllers');
const helpers = require('./utils/helpers'); // Ensure you have this file
const sequelize = require('./config/connection');

const app = express();
const PORT = process.env.PORT || 3001;

// Create the Handlebars.js engine object with custom helper functions and partials directory
const hbs = exphbs.create({
  helpers: require('./utils/helpers'),  // Ensure this file exports an object of helpers
  partialsDir: path.join(__dirname, 'views/partials'), // Register partials directory
  layoutsDir: path.join(__dirname, 'views/layouts'), 
  defaultLayout: 'main' // Register layouts directory
});

// Inform Express.js which template engine we're using
app.engine('handlebars', hbs.engine);
app.set('view engine', 'handlebars');
app.set('views', path.join(__dirname, 'views'));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

app.use(session({
  secret: process.env.SESSION_SECRET, // Replace with a strong secret
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false } // Set to true if using HTTPS
}));

app.use(routes);

sequelize.sync({ force: false }).then(() => {
  app.listen(PORT, () => console.log(Now listening on http://localhost:${PORT}));
})